name: Cooperativa web dataapi
on:
  push:
  pull_request_target:
    types: [opened, synchronize, closed]
    branches:    
      - 'master'
    paths:
      - 'web/dataapi/**'
  workflow_dispatch:
    inputs:
      deployenv:
        required: true
        description: Deployment environment
        type: environment
        default: UAT
env:
  working-directory: ./web/dataapi
  DEPLOYENVIRONMENT: ${{format(replace(replace(github.event_name == 'workflow_dispatch', True, '{0}'), False, '{1}'), github.event.inputs.deployenv, 'UAT')}}
jobs:
  show-env:
    name: Environment vars
    runs-on: ubuntu-latest
    steps:
     - name: echo-default-env-variables
       run: |
         echo "Home: ${HOME}"
         echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
         echo "GITHUB_ACTIONS: ${GITHUB_ACTIONS}"
         echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
         echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}"
         echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
         echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
         echo "GITHUB_SHA: ${GITHUB_SHA}"
         echo "GITHUB_REF: ${GITHUB_REF}"
         echo "Deployment environment: ${{ github.event.inputs.deployenv }}"
         echo "Working directory: ${{ env.working-directory }}"
         echo "DEPLOYENVIRONMENT: ${{ env.DEPLOYENVIRONMENT }}"
  build:
    name: Build app
    runs-on: ubuntu-latest
    environment: UAT
    steps:
    - name: Update OS
      run: |
        sudo apt-get update && sudo apt-get upgrade
        sudo apt autoremove
    - name: Install node
      uses: actions/setup-node@v3
      with:
        node-version: '16.14.2'
    - name : Update npm
      run: |
        npm install npm@latest -g
        node -v
        npm -version
    - name: Install loopback
      run: npm install -g @loopback/cli
    - name: Checkout repository
      uses: actions/checkout@v3
    - name : Update npm
      run: |
        npm install npm@latest -g
        node -v
        npm -version
    - name: Install packages
      run: |
        npm install
        npm prune
      working-directory: ${{env.working-directory}}
    - name : Prepare env file
      run: |
        cp ./src/datasources/env.ts.template ./src/datasources/env.ts
        cat ./src/datasources/env.ts
      working-directory: ${{env.working-directory}}
    - name: Update vars in env file
      run: |  
        sed -i 's|<CLOUDANT.DB>|${{secrets.CLOUDANT_DB}}|g' ./src/datasources/env.ts
        sed -i 's|<CLOUDANT.MODEL>|${{secrets.CLOUDANT_MODEL}}|g' ./src/datasources/env.ts
        sed -i 's|<CLOUDANT.PASSWORD>|${{secrets.CLOUDANT_PWD}}|g' ./src/datasources/env.ts
        sed -i 's|<CLOUDANT.URL>|${{secrets.CLOUDANT_URL}}|g' ./src/datasources/env.ts
        sed -i 's|<CLOUDANT.USERNAME>|${{secrets.CLOUDANT_USER}}|g' ./src/datasources/env.ts
        sed -i 's|<DB2DB.DB>|${{secrets.DB2_DATABASE}}|g' ./src/datasources/env.ts
        sed -i 's|<DB2DB.HOST>|${{secrets.DB2_HOSTNAME}}|g' ./src/datasources/env.ts
        sed -i 's|<DB2DB.PASSWORD>|${{secrets.DB2_PASSWORD}}|g' ./src/datasources/env.ts
        sed -i 's|<DB2DB.PORT>|${{secrets.DB2_PORT}}|g' ./src/datasources/env.ts
        sed -i 's|<DB2DB.SSLDSN>|${{secrets.DB2_SSLDSN}}|g' ./src/datasources/env.ts
        sed -i 's|<DB2DB.USERNAME>|${{secrets.DB2_USER}}|g' ./src/datasources/env.ts
        cat ./src/datasources/env.ts
      working-directory: ${{env.working-directory}} 
    - name: build dataapi
      run : |
        npm rebuild
        npm run clean
        npm run build
      working-directory: ${{env.working-directory}} 
    - name: clean modules
      run : |
        npm prune --production
      working-directory: ${{env.working-directory}}       
  deploy:
    name: Deploy app
    needs: [build]
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: UAT
    steps:
    - run: echo Deploying web-dataapi